array A-data-stat[144] : w32 -> w8 = symbolic
array arg00[11] : w32 -> w8 = symbolic
array arg01[11] : w32 -> w8 = symbolic
array arg02[11] : w32 -> w8 = symbolic
array const_arr1[768] : w32 -> w
array model_version[4] : w32 -> w8 = symbolic
array n_args[4] : w32 -> w8 = symbolic
array stdin-stat[144] : w32 -> w8 = symbolic
array stdout-stat[144] : w32 -> w8 = symbolic
(query [(Ult N0:(ReadLSB w32 0 n_args)
              4)
         (Slt 0 N0)
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false
             (Eq 0
                 (And w64 (ReadLSB w64 8 A-data-stat)
                          2147483647)))
         (Ult (ReadLSB w64 56 A-data-stat)
              65536)
         (Eq false
             (Eq 0
                 (And w64 (ReadLSB w64 8 stdin-stat)
                          2147483647)))
         (Ult (ReadLSB w64 56 stdin-stat)
              65536)
         (Eq false
             (Eq 0
                 (And w64 (ReadLSB w64 8 stdout-stat)
                          2147483647)))
         (Ult (ReadLSB w64 56 stdout-stat)
              65536)
         (Eq 1
             (ReadLSB w32 0 model_version))
         (Eq 45 (Read w8 0 arg00))
         (Eq false
             (Eq 0 N1:(Read w8 1 arg00)))
         (Eq false (Eq 45 N1))
         (Eq 118
             (Extract w8 0 (SExt w32 N1)))
         (Eq false
             (Eq 0 N2:(Read w8 2 arg00)))
         (Eq 118
             (Extract w8 0 (SExt w32 N2)))
         (Eq false
             (Eq 0 N3:(Read w8 3 arg00)))
         (Eq 118
             (Extract w8 0 (SExt w32 N3)))
         (Eq false
             (Eq 0 N4:(Read w8 4 arg00)))
         (Eq 118
             (Extract w8 0 (SExt w32 N4)))
         (Eq false
             (Eq 0 N5:(Read w8 5 arg00)))
         (Eq 118
             (Extract w8 0 (SExt w32 N5)))
         (Eq false
             (Eq 0 N6:(Read w8 6 arg00)))
         (Eq 118
             (Extract w8 0 (SExt w32 N6)))
         (Eq false
             (Eq 0 N7:(Read w8 7 arg00)))
         (Eq 118
             (Extract w8 0 (SExt w32 N7)))
         (Eq false
             (Eq 0 N8:(Read w8 8 arg00)))
         (Eq 118
             (Extract w8 0 (SExt w32 N8)))
         (Eq false
             (Eq 0 N9:(Read w8 9 arg00)))
         (Eq 118
             (Extract w8 0 (SExt w32 N9)))
         (Eq 45 (Read w8 0 arg01))
         (Eq 45 (Read w8 1 arg01))
         (Eq 0 (Read w8 9 arg01))
         (Eq 118 (Read w8 2 arg01))
         (Eq 101 (Read w8 3 arg01))
         (Eq 114 (Read w8 4 arg01))
         (Eq 98 (Read w8 5 arg01))
         (Eq 111 (Read w8 6 arg01))
         (Eq 115 (Read w8 7 arg01))
         (Eq 101 (Read w8 8 arg01))
         (Eq false
             (Eq 45 N10:(Read w8 0 arg02)))
         (Eq false (Eq 47 N10))
         (Eq false (Eq 0 N10))
         (Eq false (Eq 39 N10))
         (Eq false (Eq 56 N10))
         (Eq false (Eq 57 N10))
         (Eq false (Eq 58 N10))
         (Eq false (Eq 59 N10))
         (Eq false (Eq 60 N10))
         (Eq false (Eq 61 N10))
         (Eq false (Eq 62 N10))
         (Eq false (Eq 63 N10))
         (Eq false (Eq 48 N10))
         (Eq false (Eq 49 N10))
         (Eq false (Eq 50 N10))
         (Eq false (Eq 51 N10))
         (Eq false (Eq 52 N10))
         (Eq false (Eq 53 N10))
         (Eq false (Eq 54 N10))
         (Eq false (Eq 55 N10))
         (Eq false (Eq 40 N10))
         (Eq false (Eq 41 N10))
         (Eq false (Eq 42 N10))
         (Eq false (Eq 43 N10))
         (Eq false (Eq 44 N10))
         (Eq false (Eq 46 N10))
         (Eq false (Eq 32 N10))
         (Eq false (Eq 33 N10))
         (Eq false (Eq 34 N10))
         (Eq false (Eq 35 N10))
         (Eq false (Eq 36 N10))
         (Eq false (Eq 37 N10))
         (Eq false (Eq 38 N10))
         (Eq false (Eq 8 N10))
         (Eq false (Eq 9 N10))
         (Eq false (Eq 10 N10))
         (Eq false (Eq 11 N10))
         (Eq false (Eq 12 N10))
         (Eq false (Eq 13 N10))
         (Eq false (Eq 7 N10))
         (Eq false (Eq 120 N10))
         (Eq false (Eq 121 N10))
         (Eq false (Eq 122 N10))
         (Eq false (Eq 123 N10))
         (Eq false (Eq 124 N10))
         (Eq false (Eq 125 N10))
         (Eq false (Eq 126 N10))
         (Eq false (Eq 112 N10))
         (Eq false (Eq 113 N10))
         (Eq false (Eq 114 N10))
         (Eq false (Eq 115 N10))
         (Eq false (Eq 116 N10))
         (Eq false (Eq 117 N10))
         (Eq false (Eq 118 N10))
         (Eq false (Eq 119 N10))
         (Eq false (Eq 104 N10))
         (Eq false (Eq 105 N10))
         (Eq false (Eq 106 N10))
         (Eq false (Eq 107 N10))
         (Eq false (Eq 108 N10))
         (Eq false (Eq 109 N10))
         (Eq false (Eq 110 N10))
         (Eq false (Eq 111 N10))
         (Eq false (Eq 96 N10))
         (Eq false (Eq 97 N10))
         (Eq false (Eq 98 N10))
         (Eq false (Eq 99 N10))
         (Eq false (Eq 100 N10))
         (Eq false (Eq 101 N10))
         (Eq false (Eq 102 N10))
         (Eq false (Eq 103 N10))
         (Eq false (Eq 88 N10))
         (Eq false (Eq 89 N10))
         (Eq false (Eq 90 N10))
         (Eq false (Eq 91 N10))
         (Eq false (Eq 92 N10))
         (Eq false (Eq 93 N10))
         (Eq false (Eq 94 N10))
         (Eq false (Eq 95 N10))
         (Eq false (Eq 80 N10))
         (Eq false (Eq 81 N10))
         (Eq false (Eq 82 N10))
         (Eq false (Eq 83 N10))
         (Eq false (Eq 84 N10))
         (Eq false (Eq 85 N10))
         (Eq false (Eq 86 N10))
         (Eq false (Eq 87 N10))
         (Eq false (Eq 72 N10))
         (Eq false (Eq 73 N10))
         (Eq false (Eq 74 N10))
         (Eq false (Eq 75 N10))
         (Eq false (Eq 76 N10))
         (Eq false (Eq 77 N10))
         (Eq false (Eq 78 N10))
         (Eq false (Eq 79 N10))
         (Eq false (Eq 65 N10))
         (Eq false (Eq 66 N10))
         (Eq false (Eq 67 N10))
         (Eq false (Eq 68 N10))
         (Eq false (Eq 69 N10))
         (Eq false (Eq 70 N10))
         (Eq false (Eq 71 N10))
         (Eq false
             (Eq 0
                 (And w8 (And w8 (Extract w8 0 (LShr w16 (ReadLSB w16 N11:(Extract w32 0 (Add w64 256
                                                                                                  (Mul w64 2 (ZExt w64 N10)))) const_arr1)
                                                         14))
                                 1)
                         1)))
         (Eq 0 (Read w8 1 arg02))]
        false)
