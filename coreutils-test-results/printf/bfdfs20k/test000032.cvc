n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A-data-stat1  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
B-data-stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin-stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout-stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
model_version5  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg006  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr310  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr411  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg0212  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr513  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000004,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
 );
ASSERT( ( NOT( ((((0x01 = n_args0[0x00000000]
) AND (0x00 = n_args0[0x00000001]
)
) AND (0x00 = n_args0[0x00000002]
)
) AND (0x00 = n_args0[0x00000003]
)
))) );
ASSERT( ( NOT( ((((0x02 = n_args0[0x00000000]
) AND (0x00 = n_args0[0x00000001]
)
) AND (0x00 = n_args0[0x00000002]
)
) AND (0x00 = n_args0[0x00000003]
)
))) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A-data-stat1[0x0000000B] @ (A-data-stat1[0x0000000A] @ (A-data-stat1[0x00000009] @ A-data-stat1[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A-data-stat1[0x0000003F] @ (A-data-stat1[0x0000003E] @ (A-data-stat1[0x0000003D] @ (A-data-stat1[0x0000003C] @ (A-data-stat1[0x0000003B] @ (A-data-stat1[0x0000003A] @ (A-data-stat1[0x00000039] @ A-data-stat1[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (B-data-stat2[0x0000000B] @ (B-data-stat2[0x0000000A] @ (B-data-stat2[0x00000009] @ B-data-stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(B-data-stat2[0x0000003F] @ (B-data-stat2[0x0000003E] @ (B-data-stat2[0x0000003D] @ (B-data-stat2[0x0000003C] @ (B-data-stat2[0x0000003B] @ (B-data-stat2[0x0000003A] @ (B-data-stat2[0x00000039] @ B-data-stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin-stat3[0x0000000B] @ (stdin-stat3[0x0000000A] @ (stdin-stat3[0x00000009] @ stdin-stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin-stat3[0x0000003F] @ (stdin-stat3[0x0000003E] @ (stdin-stat3[0x0000003D] @ (stdin-stat3[0x0000003C] @ (stdin-stat3[0x0000003B] @ (stdin-stat3[0x0000003A] @ (stdin-stat3[0x00000039] @ stdin-stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout-stat4[0x0000000B] @ (stdout-stat4[0x0000000A] @ (stdout-stat4[0x00000009] @ stdout-stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout-stat4[0x0000003F] @ (stdout-stat4[0x0000003E] @ (stdout-stat4[0x0000003D] @ (stdout-stat4[0x0000003C] @ (stdout-stat4[0x0000003B] @ (stdout-stat4[0x0000003A] @ (stdout-stat4[0x00000039] @ stdout-stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ((((0x01 = model_version5[0x00000000]
) AND (0x00 = model_version5[0x00000001]
)
) AND (0x00 = model_version5[0x00000002]
)
) AND (0x00 = model_version5[0x00000003]
)
) );
ASSERT( ( NOT( (0x2D = arg006[0x00000000]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000000]
))) );
ASSERT( ( NOT( (0x5C = arg006[0x00000000]
))) );
ASSERT( ( NOT( (0x25 = arg006[0x00000000]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000001]
))) );
ASSERT( ( NOT( (0x5C = arg006[0x00000001]
))) );
ASSERT( ( NOT( (0x25 = arg006[0x00000001]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000002]
))) );
ASSERT( ( NOT( (0x5C = arg006[0x00000002]
))) );
ASSERT( ( NOT( (0x25 = arg006[0x00000002]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000003]
))) );
ASSERT( ( NOT( (0x5C = arg006[0x00000003]
))) );
ASSERT( ( NOT( (0x25 = arg006[0x00000003]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000004]
))) );
ASSERT( ( NOT( (0x5C = arg006[0x00000004]
))) );
ASSERT( ( NOT( (0x25 = arg006[0x00000004]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000005]
))) );
ASSERT( ( NOT( (0x5C = arg006[0x00000005]
))) );
ASSERT( ( NOT( (0x25 = arg006[0x00000005]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000006]
))) );
ASSERT( ( NOT( (0x5C = arg006[0x00000006]
))) );
ASSERT( ( NOT( (0x25 = arg006[0x00000006]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000007]
))) );
ASSERT( ( NOT( (0x5C = arg006[0x00000007]
))) );
ASSERT( ( NOT( (0x25 = arg006[0x00000007]
))) );
ASSERT( (0x25 = arg006[0x00000008]
) );
ASSERT( (0x62 = arg006[0x00000009]
) );
ASSERT( ( NOT( (0x00 = arg017[0x00000000]
))) );
ASSERT( ( NOT( (0x5C = arg017[0x00000000]
))) );
ASSERT( ( NOT( (0x00 = arg017[0x00000001]
))) );
ASSERT( ( NOT( (0x5C = arg017[0x00000001]
))) );
ASSERT( ( NOT( (0x00 = arg017[0x00000002]
))) );
ASSERT( ( NOT( (0x5C = arg017[0x00000002]
))) );
ASSERT( ( NOT( (0x00 = arg017[0x00000003]
))) );
ASSERT( ( NOT( (0x5C = arg017[0x00000003]
))) );
ASSERT( ( NOT( (0x00 = arg017[0x00000004]
))) );
ASSERT( ( NOT( (0x5C = arg017[0x00000004]
))) );
ASSERT( ( NOT( (0x00 = arg017[0x00000005]
))) );
ASSERT( ( NOT( (0x5C = arg017[0x00000005]
))) );
ASSERT( ( NOT( (0x00 = arg017[0x00000006]
))) );
ASSERT( ( NOT( (0x5C = arg017[0x00000006]
))) );
ASSERT( ( NOT( (0x00 = arg017[0x00000007]
))) );
ASSERT( ( NOT( (0x5C = arg017[0x00000007]
))) );
ASSERT( ( NOT( (0x00 = arg017[0x00000008]
))) );
ASSERT( ( NOT( (0x5C = arg017[0x00000008]
))) );
ASSERT( ( NOT( (0x00 = arg017[0x00000009]
))) );
ASSERT( ( NOT( (0x5C = arg017[0x00000009]
))) );
ASSERT( ( NOT( (0x00 = arg0212[0x00000000]
))) );
ASSERT( ( NOT( (0x5C = arg0212[0x00000000]
))) );
ASSERT( ( NOT( (0x00 = arg0212[0x00000001]
))) );
ASSERT( ( NOT( (0x5C = arg0212[0x00000001]
))) );
ASSERT( ( NOT( (0x00 = arg0212[0x00000002]
))) );
ASSERT( ( NOT( (0x5C = arg0212[0x00000002]
))) );
ASSERT( ( NOT( (0x00 = arg0212[0x00000003]
))) );
ASSERT( ( NOT( (0x5C = arg0212[0x00000003]
))) );
ASSERT( ( NOT( (0x00 = arg0212[0x00000004]
))) );
ASSERT( ( NOT( (0x5C = arg0212[0x00000004]
))) );
ASSERT( ( NOT( (0x00 = arg0212[0x00000005]
))) );
ASSERT( ( NOT( (0x5C = arg0212[0x00000005]
))) );
ASSERT( ( NOT( (0x00 = arg0212[0x00000006]
))) );
ASSERT( ( NOT( (0x5C = arg0212[0x00000006]
))) );
ASSERT( ( NOT( (0x00 = arg0212[0x00000007]
))) );
ASSERT( ( NOT( (0x5C = arg0212[0x00000007]
))) );
ASSERT( (0x5C = arg0212[0x00000008]
) );
ASSERT( ( NOT( (0x78 = arg0212[0x00000009]
))) );
ASSERT( SBVGT(arg0212[0x00000009],0x2F)
 );
ASSERT( ( NOT( SBVGT(0x38,arg0212[0x00000009])
)) );
ASSERT( (0x6E = BVSX(arg0212[0x00000009],32)
[7:0]
) );
%----------------------------------------------------
QUERY( FALSE  );
